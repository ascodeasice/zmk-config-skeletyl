#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF_L 0
#define NAV_L 1
#define SYM_L 2
#define NUM_L 3
#define MED_L 4

/* Mod Tap Parameters */

#define TAPPING_TERM 300
#define TD_TAPPING_TERM 325
#define QUICK_TAP_TERM 175

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

&mt {
    tapping-term-ms = <TAPPING_TERM>;
    flavor = "tap-preferred";
    quick-tap-ms = <QUICK_TAP_TERM>;
};

/ {
    behaviors {
        f1to3: f1to3 {
            compatible = "zmk,behavior-tap-dance";
            label = "F1TO3";
            #binding-cells = <0>;
            bindings = <&kp F1>, <&kp F2>, <&kp F3>;
        };

        f4to6: f4to6 {
            compatible = "zmk,behavior-tap-dance";
            label = "F4TO6";
            #binding-cells = <0>;
            bindings = <&kp F4>, <&kp F5>, <&kp F6>;
        };

        f7to9: f7to9 {
            compatible = "zmk,behavior-tap-dance";
            label = "F7TO9";
            #binding-cells = <0>;
            bindings = <&kp F7>, <&kp F8>, <&kp F9>;
        };

        shift_or_cap: shift_or_cap {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_OR_CAP";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;
        };

        index_i_j_k: index_i_j_k {
            compatible = "zmk,behavior-tap-dance";
            label = "INDEX_I_J_K";
            #binding-cells = <0>;
            bindings = <&index_i>, <&index_j>, <&index_k>;
        };

        index_0_1_2: index_0_1_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "INDEX_0_1_2";
            #binding-cells = <0>;
            bindings = <&index0>, <&index1>, <&index_2>;
        };

        swap_quote: swap_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "SWAP_QUOTE";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS
        TODO
        /* Letters */

        v {
            key-positions = <2 3>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            key-positions = <12 11>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        z {
            key-positions = <2 13>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 13>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0>;
        };

        x {
            bindings = <&kp X>;
            key-positions = <12 23>;
            layers = <0>;
        };

        zero {
            bindings = <&kp N0>;
            key-positions = <21 22>;
            layers = <0 2>;
            timeout-ms = <30>;
        };

        one {
            bindings = <&kp N1>;
            key-positions = <22 23>;
            layers = <0 2>;
            timeout-ms = <25>;
        };

        b {
            bindings = <&kp B>;
            key-positions = <12 13>;
            layers = <0>;
            timeout-ms = <30>;
        };

        j {
            bindings = <&kp J>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <30>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <27 28>;
            layers = <0>;
        };

        semicolon {
            bindings = <&kp SEMI>;
            key-positions = <16 18>;
            layers = <0>;
            timeout-ms = <17>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <26 27>;
            layers = <0>;
        };

        swap_quote {
            bindings = <&swap_quote>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <25>;
        };

        to_nav {
            bindings = <&to 1>;
            key-positions = <21 22 23>;
            layers = <0>;
        };

        str {
            bindings = <&str>;
            key-positions = <6 16>;
            layers = <0>;
        };

        bracket_word {
            bindings = <&bracket_word>;
            key-positions = <7 17>;
            layers = <0>;
        };

        var_text {
            bindings = <&var_text>;
            key-positions = <8 18>;
            layers = <0>;
        };

        two {
            bindings = <&kp NUMBER_2>;
            key-positions = <21 23>;
            layers = <0 2>;
            timeout-ms = <30>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <25>;
        };

        key {
            bindings = <&key>;
            key-positions = <3 13>;
            layers = <0>;
        };

        s_eq {
            bindings = <&s_eq>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            layers = <0>;
        };

        home_dir {
            bindings = <&home_dir>;
            key-positions = <1 3>;
            layers = <0>;
        };

        astrk {
            bindings = <&kp ASTRK>;
            key-positions = <26 28>;
            layers = <0>;
        };

        s_nq {
            bindings = <&s_neq>;
            key-positions = <8 6>;
            layers = <0>;
            timeout-ms = <30>;
        };

        less {
            bindings = <&less>;
            key-positions = <1 2>;
            layers = <2>;
        };

        gt {
            bindings = <&gt>;
            key-positions = <2 3>;
            layers = <2>;
        };

        arrow {
            bindings = <&arrow>;
            key-positions = <11 12>;
            layers = <2>;
        };

        last_dir {
            bindings = <&last_dir>;
            key-positions = <1 11>;
            layers = <0>;
        };

        to_media {
            bindings = <&to 4>;
            key-positions = <26 27 28>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <11 10>;
            layers = <0>;
            timeout-ms = <30>;
        };

        close_program {
            bindings = <&kp LA(F4)>;
            key-positions = <14 13>;
            timeout-ms = <30>;
            layers = <0>;
        };

        sym_or {
            bindings = <&sym_or>;
            key-positions = <8 7>;
            layers = <2>;
        };
    };

    macros {
        const: const {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp S &kp T &kp SPACE>;
            label = "CONST";
        };

        you: of {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Y &kp O &kp U>;
            label = "OF";
        };

        and: and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp N &kp D>;
            label = "AND";
        };

        key: key {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp K &kp E &kp Y>;
            label = "KEY";
        };

        fun: fun {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp U &kp N &kp C &kp T &kp I &kp O &kp N>;
            label = "FUN";
        };

        return: return {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp E &kp T &kp U &kp R &kp N &kp SPACE>;
            label = "RETURN";
        };

        value: value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp V &kp A &kp L &kp U &kp E>;
            label = "VALUE";
        };

        home_dir: home_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp FSLH>;
            label = "HOME_DIR";
        };

        s_neq: s_neq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL &kp EQUAL>;
            label = "S_NEQ";
        };

        less: less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LT";
        };

        gt: gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GT &kp EQUAL>;
            label = "GT";
        };

        arrow: arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>;
            label = "ARROW";
        };

        s_eq: s_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp EQUAL &kp EQUAL>;
            label = "S_EQ";
        };

        export: export {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp P &kp O &kp R &kp T &kp SPACE>;
            label = "EXPORT";
        };

        last_dir: last_dir {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp DOT &kp FSLH>;
            label = "LAST_DIR";
        };

        str: str {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&swap_quote &swap_quote &kp LEFT>;
            label = "STR";
        };

        true: true {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &kp R &kp U &kp E>;
            label = "TRUE";
        };

        false: false {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F &kp A &kp L &kp S &kp E>;
            label = "FALSE";
        };

        default: default {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp E &kp F &kp A &kp U &kp L &kp T &kp SPACE>;
            label = "DEFAULT";
        };

        import: import {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp M &kp P &kp O &kp R &kp T &kp SPACE>;
            label = "IMPORT";
        };

        continue: continue {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp N &kp T &kp I &kp N &kp U &kp E>;
            label = "CONTINUE";
        };

        stu_id: stu_id {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N2 &kp N4 &kp N1 &kp N0 &kp N6 &kp N2 &kp N5 &kp N4>;
            label = "STU_ID";
        };

        paren_word: paren_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp LEFT>;
            label = "PAREN_WORD";
        };

        md_link: md_link {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LPAR &kp RPAR &kp LEFT &kp LEFT &kp LEFT>;
            label = "MD_LINK";
        };

        index_i: index_i {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp I &kp RIGHT_BRACKET>;
            label = "INDEX_I";
        };

        index_j: index_j {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp J &kp RIGHT_BRACKET>;
            label = "INDEX_J";
        };

        index0: index0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N0 &kp RIGHT_BRACKET>;
            label = "INDEX0";
        };

        index1: index1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N1 &kp RIGHT_BRACKET>;
            label = "INDEX1";
        };

        length: length {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp L &kp E &kp N &kp G &kp T &kp H>;
            label = "LENGTH";
        };

        index_2: index_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp N2 &kp RIGHT_BRACKET>;
            label = "INDEX_2";
        };

        index_k: index_k {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp K &kp RBKT>;
            label = "INDEX_K";
        };

        sym_or: sym_or {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PIPE &kp PIPE>;
            label = "SYM_OR";
        };

        localhost_url: localhost_url {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp T &kp T &kp P &kp COLON &kp FSLH &kp FSLH &kp L &kp O &kp C &kp A &kp L &kp H &kp O &kp S &kp T &kp COLON>;
            label = "LOCALHOST_URL";
        };

        v_replace: v_replace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp COLON &kp PRCNT &kp S &kp FSLH>;
            label = "V_REPLACE";
        };

        var_text: var_text {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DLLR &kp LBRC &kp RBRC &kp LEFT>;
            label = "VAR_TEXT";
        };

        v_save_exit: v_save_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ESCAPE &kp LS(Z) &kp LS(Z)>;
            label = "V_SAVE_EXIT";
        };

        bracket_word: bracket_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LBKT &kp RIGHT_BRACKET &kp LEFT>;
            label = "BRACKET_WORD";
        };

        code_block: code_block {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp GRAVE &kp GRAVE &kp ENTER &kp GRAVE &kp GRAVE &kp GRAVE &kp UP &kp ENTER>;
            label = "CODE_BLOCK";
        };

        anfn: anfn {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LPAR &kp RPAR &kp SPACE &kp EQUAL &kp GT>;
            label = "ANFN";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&swap_quote  &kp W           &kp F             &kp P               &kp B                                     &kp J        &kp L               &kp U               &kp Y           &kp SEMI
&lt 5 A      &mt LC(LWIN) R  &mt LC(LSHIFT) S  &mt LC(LEFT_ALT) T  &kp G                                     &kp M        &mt LC(LEFT_ALT) N  &mt LC(LSHIFT) E    &mt LC(LWIN) I  &mt LSHIFT O
&none        &mt LCTRL K     &mt LEFT_ALT C    &mt LEFT_WIN D      &none                                     &none        &mt LEFT_GUI H      &mt LEFT_ALT COMMA  &mt LCTRL DOT   &none
                                               &key_repeat         &kp LSHIFT  &lt 2 BACKSPACE  &lt 3 ENTER  &lt 1 SPACE  &key_repeat
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&none       &kp LA(F4)               &mmv MOVE_UP     &kp LA(TAB)               &none                        &none      &kp K_CONTEXT_MENU  &mt PAGE_UP UP      &trans         &none
&kp ESCAPE  &mmv MOVE_LEFT           &mmv MOVE_DOWN   &mmv MOVE_RIGHT           &trans                       &kp ENTER  &mt HOME LEFT       &mt PAGE_DOWN DOWN  &mt END RIGHT  &msc SCRL_RIGHT
&none       &mt LEFT_CONTROL DELETE  &mt LC(V) LC(C)  &mt PRINTSCREEN CAPSLOCK  &none                        &none      &msc SCRL_LEFT      &msc SCRL_DOWN      &msc SCRL_UP   &none
                                                      &none                     &mkp LCLK  &mkp RCLK  &to 0  &kp ENTER  &none
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
&trans    &kp ASTRK  &kp COMMA  &kp DOT     &none                           &none                 &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &none
&kp EXCL  &kp GRAVE  &kp SEMI   &kp EQUAL   &kp PERCENT                     &kp BACKSPACE         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp AMPERSAND  &swap_quote
&none     &kp AT     &kp HASH   &kp DOLLAR  &none                           &none                 &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp CARET      &none
                                &none       &trans       &trans  &kp ENTER  &mt LEFT_SHIFT SPACE  &none
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&none   &f1to3  &f4to6          &f7to9              &none                         &none   &kp F10  &kp F11    &kp F12  &none
&kp N1  &kp N2  &kp N3          &kp N4              &kp N5                        &kp N6  &kp N7   &kp N8     &kp N9   &kp N0
&none   &none   &mt PAGE_UP UP  &mt PAGE_DOWN DOWN  &none                         &none   &none    &kp COMMA  &kp DOT  &none
                                &none               &kp SPACE  &kp ENTER  &trans  &trans  &none
            >;
        };

        MEDIA_LAYER {
            bindings = <
&trans        &trans        &trans        &trans        &trans                       &trans      &kp K_PREV         &kp K_PLAY_PAUSE  &kp K_NEXT     &trans
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                 &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP   &kp C_BRI_DEC  &kp C_BRI_INC
&none         &trans        &bootloader   &trans        &none                        &none       &trans             &bootloader       &bt BT_CLR     &none
                                          &none         &trans        &to 0  &trans  &trans      &none
            >;
        };

        shortcut_layer {
            bindings = <
&trans  &trans      &md_link      &paren_word     &trans                               &trans  &true      &false    &length  &trans
&trans  &stu_id     &index_i_j_k  &index_0_1_2    &code_block                          &trans  &export    &default  &fun     &return
&none   &v_replace  &v_save_exit  &localhost_url  &import                              &value  &continue  &anfn     &none    &none
                                  &none           &caps_word   &sk LEFT_SHIFT  &trans  &none   &none
            >;
        };
    };
};
